{
	"info": {
		"_postman_id": "65d6158b-c555-4336-ba89-7071a6e7a4e7",
		"name": "Auth tests",
		"description": "# ‚õìÔ∏è Get started here\n\nPostman allows you to test your APIs using simple Javascript code. You can evaluate your response body, headers, cookies, and more using the [ChaiJS BDD](https://www.chaijs.com/api/bdd/) syntax.\n\nThis template guides you through the process of setting up an integration test to ensure that all individual components of an API function together seamlessly.\n\nThe API under test in this collection includes three endpoints for registering and receiving a token, accessing your unique generated name, and unregistering a token:\n\n- POST `/register`\n- POST `/unregister`\n- GET `/my-name`\n    \n\nBy setting up requests in the order of the operation, we can test the flow of data to and from the endpoints and ensure they work together as expected. We also verify that the data persists between requests on the back end.\n\n## üîñ **How to use this template**\n\n**Step 1:** Check out the requests' documentation to learn more about -\n\n- what each request is meant to do.\n- the tests we've added against each one.\n    \n\n**Step 2:** Run this collection by clicking on \"Run\".\n\n<img src=\"https://content.pstmn.io/84019b0f-69c8-4c5f-98b9-2c90a6f9a0b1/Y29sbGVjdGlvbi1ydW5uZXItYnV0dG9uLmpwZWc=\" alt=\"\" height=\"103\" width=\"266\">\n\n**Step 3:** To customize this template, replace the request URLs with your API endpoints and add or edit the tests if needed.\n\n## ‚ÑπÔ∏è Resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5429969"
	},
	"item": [
		{
			"name": "Register user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User 1 register\", () => {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.body(\"1\");",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"user1\",\n  \"password\": \"123456\",\n  \"firstName\": \"User\",\n  \"lastName\": \"First\",\n  \"email\": \"i@ya.ru\",\n  \"phone\": \"+71002003040\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user"
					]
				},
				"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
			},
			"response": []
		},
		{
			"name": "No access by user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No access by user1\", () => {",
							"    pm.response.to.have.status(403);",
							"    pm.response.to.have.body(\"403 Forbidden\\n\");",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/user/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"1"
					]
				},
				"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
			},
			"response": []
		},
		{
			"name": "Login user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login by user1\", () => {",
							"    pm.response.to.have.status(200);",
							"",
							"    pm.expect(pm.response.json()).to.have.property('accessToken')",
							"    pm.expect(pm.response.json().accessToken).to.be.a('string')",
							"",
							"    pm.collectionVariables.set('token', pm.response.json().accessToken)",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123456\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				},
				"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
			},
			"response": []
		},
		{
			"name": "Update user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User 1 update\", () => {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.body(\"1\");",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"user1\",\n  \"password\": \"123456\",\n  \"firstName\": \"User\",\n  \"lastName\": \"First\",\n  \"email\": \"new@ya.ru\",\n  \"phone\": \"+71002003040\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"1"
					]
				},
				"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
			},
			"response": []
		},
		{
			"name": "Check updates user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Test updates by user1\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    pm.expect(pm.response.json()).to.have.property('ID');",
							"    pm.expect(pm.response.json()).to.have.property('Username');",
							"    pm.expect(pm.response.json()).to.have.property('FirstName');",
							"    pm.expect(pm.response.json()).to.have.property('LastName');",
							"    pm.expect(pm.response.json()).to.have.property('Email');",
							"    pm.expect(pm.response.json()).to.have.property('Phone');",
							"",
							"    pm.expect(pm.response.json().Email).to.eql('new@ya.ru');",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/user/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"1"
					]
				},
				"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
			},
			"response": []
		},
		{
			"name": "Register user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User 2 register\", () => {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.body(\"2\");",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"user2\",\n  \"password\": \"123456\",\n  \"firstName\": \"User\",\n  \"lastName\": \"Second\",\n  \"email\": \"i2@ya.ru\",\n  \"phone\": \"+71002003040\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user"
					]
				},
				"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
			},
			"response": []
		},
		{
			"name": "Login user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login by user2\", () => {",
							"    pm.response.to.have.status(200);",
							"",
							"    pm.expect(pm.response.json()).to.have.property('accessToken')",
							"    pm.expect(pm.response.json().accessToken).to.be.a('string')",
							"",
							"    pm.collectionVariables.set('token', pm.response.json().accessToken)",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"user2\",\n    \"password\": \"123456\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				},
				"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
			},
			"response": []
		},
		{
			"name": "No access to user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No access from user2 to user1\", () => {",
							"    pm.response.to.have.status(403);",
							"    pm.response.to.have.body(\"403 Forbidden\\n\");",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/user/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"1"
					]
				},
				"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "http://arch.homework"
		}
	]
}